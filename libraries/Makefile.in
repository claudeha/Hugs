# @configure_input@
################################################################
# Conversion of libraries from raw sources in the packages tree
# (this should be a POSIX 1003.2-1992 Makefile)
################################################################

@MkDefs@

# We use the autoconf-supplied install-sh to create directories
# but use /bin/cp to copy data because install-sh can't copy
# multiple files at once.

INSTALL		= ../install-sh
INSTALL_DATA	= /bin/cp
CPPFLAGS	= -D__HUGS__ -D$(HOST_OS)_HOST_OS -D$(HOST_OS)_TARGET_OS

BUILD_DIR	= ../hugsdir
BASE_INCLUDE_DIR = ../packages/base/include

HEADERS		= ../src/HsFFI.h
GHC_HEADERS	= ../src/platform.h include/MachDeps.h include/ghcconfig.h
CPPHS_SRC	= ../cpphs
HSC2HS_SRC	= ../hsc2hs
HAPPY_SRC	= ../happy

# set the path both for runhugs and any ffihugs invoked by Cabal
# HUGSDIR gives the location of HsFFI.h
HUGS_SETUP	= HUGSFLAGS=-P{Hugs}/packages/\* HUGSDIR=../hugsdir ../src/runhugs -98 Setup.hs
HAPPY_SETUP = PATH=../src:$(PATH) HUGSFLAGS=-P{Hugs}/packages/\* HUGSDIR=../hugsdir ../src/runhugs -98 Setup.lhs

INCLUDES	= $(BUILD_DIR)/include/HsFFI.h
# header files used by the base package
BASE_INCLUDES	= $(BASE_INCLUDE_DIR)/platform.h \
		  $(BASE_INCLUDE_DIR)/MachDeps.h \
		  $(BASE_INCLUDE_DIR)/ghcconfig.h

# We use a bootstrap procedure to construct the libraries:
#
# 1. Preprocess hugsbase, base, haskell98, Cabal and packages they use
#    into ../hugsdir using the shell script make_bootlib.  The result is
#    incomplete, in particular because hsc2hs wasn't available yet, but
#    it's enough to get ffihugs, runhugs, cpphs, hsc2hs and Cabal working,
#
# 2. Build cpphs and then hsc2hs into ../hugsdir.
#
# 3. Build all the library packages into ../hugsdir (overwriting the boot
#    versions), using cpphs, hsc2hs and Cabal.
#
# Unfortunately that means building (and configuring) base twice.

CPPHS		= tools/cpphs
HSC2HS		= tools/hsc2hs
HAPPY		= tools/happy
CPPHS_FILE	= $(CPPHS)$(BAT)
HSC2HS_FILE	= $(HSC2HS)$(BAT)
HAPPY_FILE	= $(HAPPY)$(BAT)
MAKE_BOOT	= tools/make_bootlib
CONVERT		= tools/convert_libraries
BOOTLIB		= $(BUILD_DIR)/.bootstamp
LIBS		= $(BUILD_DIR)/.stamp

all: $(LIBS)

$(LIBS): $(BOOTLIB) $(INCLUDES) $(CPPHS_FILE) $(HSC2HS_FILE) $(HAPPY_FILE) $(CONVERT)
	cd ..; HOST='$(HOST)' PREFIX='$(prefix)' libraries/$(CONVERT) fptools hugsdir
	echo timestamp for libraries >$@

$(HSC2HS): $(BUILD_DIR)/programs/hsc2hs/Main.hs
	(echo '#! /bin/sh'; \
	 echo "rootdir='`cd ..; pwd`'"; \
	 echo '$$rootdir/src/runhugs -98 "-P$$rootdir/hugsdir/packages/*" $$rootdir/hugsdir/programs/hsc2hs/Main.hs -I$$rootdir/hugsdir/include -t$$rootdir/hsc2hs/template-hsc.h "$$@"') >$@
	chmod 755 $@

$(HSC2HS).bat: $(BUILD_DIR)/programs/hsc2hs/Main.hs
	(echo '@echo off'; \
	 echo "set rootdir=`cd ..; src/runhugs -98 '-Phugsdir/packages/*' libraries/pwd.hs`"; \
	 echo '%rootdir%/src/runhugs -98 "-P%rootdir%/hugsdir/packages/*" %rootdir%/hugsdir/programs/hsc2hs/Main.hs -I%rootdir%/hugsdir/include -t%rootdir%/hsc2hs/template-hsc.h %*') >$@

$(BUILD_DIR)/programs/hsc2hs/Main.hs: $(HSC2HS_SRC)/Main.hs $(BOOTLIB) $(INCLUDES) $(CPPHS_FILE)
	cd $(HSC2HS_SRC); $(HUGS_SETUP) configure --verbose --hugs --prefix='$(prefix)' --scratchdir='$(BUILD_DIR)' --with-compiler=../src/ffihugs --with-hugs=../src/hugs --with-cpphs='../libraries/tools/cpphs$(BAT)'
	cd $(HSC2HS_SRC); $(HUGS_SETUP) build --verbose
	$(RM) -r $(BUILD_DIR)/autogen

$(CPPHS): $(BUILD_DIR)/programs/cpphs/Main.hs
	(echo '#! /bin/sh'; \
	 echo "rootdir='`cd ..; pwd`'"; \
	 echo '$$rootdir/src/runhugs -98 "-P$$rootdir/hugsdir/packages/*" $$rootdir/hugsdir/programs/cpphs/Main.hs "$$@"') >$@
	chmod 755 $@

$(CPPHS).bat: $(BUILD_DIR)/programs/cpphs/Main.hs
	(echo '@echo off'; \
	 echo "set rootdir=`cd ..; src/runhugs -98 '-Phugsdir/packages/*' libraries/pwd.hs`"; \
	 echo '%rootdir%/src/runhugs -98 '-P%rootdir%/hugsdir/packages/*' %rootdir%/hugsdir/programs/cpphs/Main.hs %*') >$@

$(BUILD_DIR)/programs/cpphs/Main.hs: $(BOOTLIB) $(INCLUDES)
	cd $(CPPHS_SRC); $(HUGS_SETUP) configure --verbose --hugs --prefix='$(prefix)' --scratchdir='$(BUILD_DIR)/packages/cpphs' --with-compiler=../src/ffihugs --with-hugs=../src/hugs
	cd $(CPPHS_SRC); $(HUGS_SETUP) build --verbose
	$(RM) -r $(BUILD_DIR)/packages/cpphs/autogen
	mkdir -p $(BUILD_DIR)/programs
	$(RM) -r $(BUILD_DIR)/programs/cpphs
	mv $(BUILD_DIR)/packages/cpphs/programs/cpphs $(BUILD_DIR)/programs
	rmdir $(BUILD_DIR)/packages/cpphs/programs

$(HAPPY): $(BUILD_DIR)/programs/happy/Main.lhs
	(echo '#! /bin/sh'; \
	 echo "rootdir='`cd ..; pwd`'"; \
	 echo '$$rootdir/src/runhugs -98 -h10M "-P$$rootdir/hugsdir/packages/*" $$rootdir/hugsdir/programs/happy/Main.lhs -t$$rootdir/happy "$$@"') >$@
	chmod 755 $@

$(HAPPY).bat: $(BUILD_DIR)/programs/happy/Main.lhs
	(echo '@echo off'; \
	 echo "set rootdir=`cd ..; src/runhugs -98 -Plibraries/bootlib libraries/pwd.hs`"; \
	 echo '%rootdir%/src/runhugs -98 -h10M "-P%rootdir%/hugsdir/packages/*" %rootdir%/hugsdir/programs/happy/Main.lhs -t%rootdir%/happy %*') >$@


$(BUILD_DIR)/programs/happy/Main.lhs: $(BOOTLIB) $(INCLUDES) $(CPPHS_FILE)
	cd $(HAPPY_SRC); $(HAPPY_SETUP) configure --verbose --hugs --prefix='$(prefix)' --scratchdir='$(BUILD_DIR)' --with-compiler=../src/ffihugs --with-cpphs='../libraries/tools/cpphs$(BAT)'
	cd $(HAPPY_SRC); $(HAPPY_SETUP) build --verbose
	$(RM) -r $(BUILD_DIR)/autogen


$(BOOTLIB): hugsbase/Hugs/*.* $(MAKE_BOOT) $(INCLUDES) $(BASE_INCLUDES)
	CPPFLAGS='$(CPPFLAGS)' $(MAKE_BOOT)
	echo timestamp for boot libraries >$@

$(INCLUDES): $(HEADERS)
	mkdir -p $(BUILD_DIR)/include
	$(CP) $(HEADERS) $(BUILD_DIR)/include

$(BASE_INCLUDES): $(GHC_HEADERS)
	$(CP) $(GHC_HEADERS) $(BASE_INCLUDE_DIR)

clean:
	$(RM) LibStatus
	$(RM) a.out
	$(RM) *~
	$(RM) -r hugsbase/dist
	$(RM) -r ../cpphs/dist
	$(RM) -r ../hsc2hs/dist
	$(RM) -r ../packages/*/dist
	find ../packages -name \*.hsc | sed 's/c$$//' | xargs $(RM)
	$(RM) $(BASE_INCLUDES)
# package configuration is part of the build process, so clean it here
	$(RM) ../packages/*/config.log
	$(RM) ../packages/*/config.status
	$(RM) -r ../packages/*/autom4te.cache
	find ../packages -name \*.in | sed 's/\.in$$//' | xargs $(RM)
	$(RM) -r tmp

distclean: clean
	$(RM) $(HSC2HS_FILE)
	$(RM) $(HAPPY_FILE)
	$(RM) $(CPPHS_FILE)
	$(RM) -r $(BUILD_DIR)
	$(RM) Makefile tools/config include/ghcconfig.h
	$(RM) config.log config.status
	$(RM) -r autom4te.cache

veryclean: distclean

install: all
	$(INSTALL) -d $(DESTDIR)$(hugsdir)/include
	$(INSTALL_DATA) $(BUILD_DIR)/include/* $(DESTDIR)$(hugsdir)/include
	(cd $(BUILD_DIR); find packages -type f -print) | while read file;\
		do	dir=`dirname $$file`;\
			case $$file in \
			*.c)	;;\
			*) \
				$(INSTALL) -d $(DESTDIR)$(hugsdir)/$$dir;\
				$(INSTALL) -c -m 0644 $(BUILD_DIR)/$$file $(DESTDIR)$(hugsdir)/$$file;;\
			esac;\
		done
	#this file is a template, should not install.
	rm -rf $(DESTDIR)$(hugsdir)/packages/filepath/System/FilePath/Internal.hs
	(cd $(BUILD_DIR); find demos -type f -print) | while read file;\
		do	dir=`dirname $$file`;\
			$(INSTALL) -d $(DESTDIR)$(hugsdir)/$$dir;\
			$(INSTALL) -c -m 0644 $(BUILD_DIR)/$$file $(DESTDIR)$(hugsdir)/$$file;\
		done
	(cd $(BUILD_DIR); find programs -type f -print) | while read file;\
		do	dir=`dirname $$file`;\
			$(INSTALL) -d $(DESTDIR)$(hugsdir)/$$dir;\
			$(INSTALL) -c -m 0644 $(BUILD_DIR)/$$file $(DESTDIR)$(hugsdir)/$$file;\
		done
	$(INSTALL) -d $(DESTDIR)$(bindir)
	(echo '#! /bin/sh'; \
	 echo 'runhugs -98 $(hugsdir)/programs/cpphs/Main.hs "$$@"') >$(DESTDIR)$(bindir)/cpphs-hugs
	chmod 755 $(DESTDIR)$(bindir)/cpphs-hugs
# install template file
	$(INSTALL) -c -m 0644 ../hsc2hs/template-hsc.h "$(DESTDIR)$(hugsdir)/programs/hsc2hs/template-hsc.h"
	(echo '#! /bin/sh'; \
	 echo 'runhugs -98 $(hugsdir)/programs/hsc2hs/Main.hs -I$(hugsdir)/include -t$(hugsdir)/programs/hsc2hs/template-hsc.h "$$@"') >$(DESTDIR)$(bindir)/hsc2hs-hugs
	chmod 755 $(DESTDIR)$(bindir)/hsc2hs-hugs
	$(INSTALL) -d "$(DESTDIR)$(hugsdir)/programs/happy"; \
	 $(INSTALL) -d "$(DESTDIR)$(hugsdir)/programs/happy/template"; \
	 cp -r ../happy/HappyTemplate* "$(DESTDIR)$(hugsdir)/programs/happy/template/"; \
	 cp -r ../happy/GLR_* "$(DESTDIR)$(hugsdir)/programs/happy/template/"; \
	 rm -rf $(DESTDIR)$(hugsdir)/programs/happy/template/*.bak
	(echo '#! /bin/sh'; \
	 echo 'runhugs -98 -h10M $(hugsdir)/programs/happy/Main.lhs -t$(hugsdir)/programs/happy/template "$$@"') >$(DESTDIR)$(bindir)/happy-hugs
	chmod 755 $(DESTDIR)$(bindir)/happy-hugs 
	if [ -d $(BUILD_DIR)/programs/HsColour ]; then \
		(echo '#! /bin/sh'; \
		 echo 'runhugs -98 $(hugsdir)/programs/HsColour/Main.hs "$$@"') >$(DESTDIR)$(bindir)/hscolour-hugs; \
		chmod 755 $(DESTDIR)$(bindir)/hscolour-hugs; \
	fi
	$(INSTALL) -d "$(DESTDIR)$(hugsdir)/programs/alex"; \
	 $(INSTALL) -d "$(DESTDIR)$(hugsdir)/programs/alex/template"; \
	 cp -r ../packages/alex/Alex* "$(DESTDIR)$(hugsdir)/programs/alex/template/"; \
	 rm -rf $(DESTDIR)$(hugsdir)/programs/alex/template/*.bak
	if [ -d $(BUILD_DIR)/programs/alex ]; then \
		(echo '#! /bin/sh'; \
		 echo 'runhugs -98 -h10M $(hugsdir)/programs/alex/Main.hs -t$(hugsdir)/programs/alex/template "$$@"') >$(DESTDIR)$(bindir)/alex-hugs; \
		chmod 755 $(DESTDIR)$(bindir)/alex-hugs; \
	fi

LibStatus: $(LIBS)
	tools/test_libraries ../packages >$@
